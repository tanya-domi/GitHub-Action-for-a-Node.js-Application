name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

permissions:
  id-token: write 
  pull-requests: write
  statuses: write
  actions: read
  contents: read

env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  JFROG_CLI_LOG_LEVEL: DEBUG

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        nodejs_version: [18]
        operating_system: [ubuntu-latest, macos-latest]
        # exclude:
        # - nodejs_version: 20
        #   operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Setup Node.js Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test --reporter mocha-junit-reporter --reporter-options mochaFile=test-results.xml

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}
          path: test-results.xml
          retention-days: 5
  
  
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests and Collect Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 5

  publish-build:
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean npmrc
        run: rm -f ~/.npmrc

      - name: Setup JFrog CLI OIDC
        uses:  jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:  
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

        #   # JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # with:
        #   oidc-provider-name: github-jfrog-intragration 
        #   oidc-audience: my-aud
           
      - name: Setup Node npm
        uses: actions/setup-node@v4

      - name: Set CLI Config
        run: | 
          jf npm-config --global=true --repo-resolve=virtual-solar-system --repo-deploy=local-solar-system
          
      - name: Install Deps
        run: jf npm install
         
      - name: Publish Package to Artifactory
        run: jf npm publish

      - name: Download Test Results Artifact
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result-18-ubuntu-latest
          path: reports/unit-tests

      - name: Download Coverage Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: reports/coverage

      - name: Upload Test Results & Coverage to Artifactory
        run: |
          jf rt u "reports/unit-tests/*" "local-solar-system/unit-tests/" --build-name=solar-system --build-number=$GITHUB_RUN_NUMBER
          jf rt u "reports/coverage/*" "local-solar-system/coverage/" --build-name=solar-system --build-number=$GITHUB_RUN_NUMBER
         
      - name: Publish Build info With JFrog CLI
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish

  docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Log in to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: Set up QEMU emulator
        uses: docker/setup-qemu-action@v3


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build Docker Image for Testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}


      - name: Run Container and Test `/live` Endpoint
        run: |
          docker run --rm --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}


          echo "Verifying /live endpoint"
          wget -q -O - http://127.0.0.1:3000/live | grep live

   
  push-image:
    needs: [unit-testing, docker]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}


      - name: Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

  dev-deploy:
    runs-on: ubuntu-latest
    needs: docker
    outputs:
      alb_host: ${{ steps.fetch-alb-host.outputs.alb_host }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CI_ROLE }}
          aws-region: eu-north-1

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
           version: 'v1.26.0'

      - name: Configure kubectl
        run: aws eks --region eu-north-1 update-kubeconfig --name hr-dev-eks-cloud
       
      - name: Verify updated manifests
        run: |
          cat kubernetes/development/*.yaml

      - name: Create MongoDB Secret
        run: |
          kubectl -n dev create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ secrets.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Deploy to Dev Environment
        run: |
          kubectl apply -f kubernetes/development

      - name: Fetch ALB Host
        id: fetch-alb-host
        run: |
          for i in {1..20}; do
            HOST=$(kubectl get ingress my-app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$HOST" ]; then break; fi
            echo "Waiting for ALB DNS..."
            sleep 15
          done
          echo "alb-host=$HOST" >> $GITHUB_OUTPUT

  # integration-testing:
  #   name: Dev Integration Testing
  #   needs: dev-deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test `/live` Endpoint
  #       env:
  #          INGRESS_HOST: ${{ needs.dev-deploy.outputs.alb_host }}
  #       run: |
  #         echo "Testing endpoint: http://$INGRESS_HOST/live"

  #          for i in {1..10}; do
  #            if curl -sf http://$INGRESS_HOST/live; then
  #              echo "Live endpoint is healthy"
  #              exit 0
  #            fi
  #            echo "‚è≥ Waiting for /live endpoint..."
  #            sleep 10
  #         done
        
  #         echo "Failed to reach /live endpoint at http://$INGRESS_HOST/live"
  #         exit 1
  